/*  * Copyright (c) 1998-2016 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA,  * and/or its subsidiaries and/or its affiliates and/or their licensors. Use, reproduction, transfer,  * publication or disclosure is prohibited except as specifically provided for in your License Agreement  * with Software AG. */package com.softwareag.adabas.xts.helpers;import java.util.Enumeration;import java.util.Hashtable;import java.util.Vector;import com.softwareag.adabas.xts.XTStrace;import com.softwareag.adabas.xts.XTSversion;import com.softwareag.adabas.xts.interfaces.IConnection;/** * Target management. **/public//   Maintenance://   Reworked by usamih (Michael Chirila) 10/06/2022// ----------------------------------------------------------------------class Target {	public static final String VERSION = XTSversion.VERSION; 	public static final String COPYRIGHT = XTSversion.COPYRIGHT;	private int target;	private String targname;	private String aliasname;	private String hostName = null;                                	public int getTarget() {		return target;	}	public void setTarget(int target) {		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Set Target Id=0x" + String.format("%x", target));		this.target = target;	}	public String getTargname() {		return targname;	}	public String getAliasname() {		return aliasname;	}	public void setTargname(String targname) {		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Set Target Name=" + targname);		this.targname = targname;	}	public IConnection connection;	public boolean clientTarget = false;	private static final Hashtable<String, Target> nameLookup = new Hashtable<String, Target>();	public Target(int target, String targname, IConnection connection, boolean clientTarget) {		this(target, targname, connection);		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Create clientTarget=" + clientTarget + " Target Id=0x" + String.format("%x", target) + " TargetName=" + targname + " Conn=" + connection);		this.clientTarget = clientTarget;	}	public Target(int target, String targname, IConnection connection) {		this.target = target;		this.targname = targname;		this.connection = connection;		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Create Target Id=0x" + String.format("%x", target) + " TargetName=" + targname + " Conn=" + connection);		nameLookup.put(targname, this);		printTargets ();	}	public Target(int target, String targname, IConnection connection, String hostName) {		this.hostName = hostName;		this.target = target;		this.targname = targname;		this.connection = connection;		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Create Target Id=0x" + String.format("%x", target) + " TargetName=" + targname + " hostName=" + hostName + " Conn=" + connection);		if (this.hostName != null)			nameLookup.put(targname + " " + this.hostName, this);		else			nameLookup.put(targname, this);		printTargets ();	}	public Target(int target, String targname, String aliasname, IConnection connection) {		this.target = target;		this.targname = targname;		this.aliasname = aliasname;		this.connection = connection;		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Create Target Id=0x" + String.format("%x", target) + " TargetName=" + targname + " aliasName=" + aliasname + " Conn=" + connection);		nameLookup.put(aliasname, this);		printTargets ();	}	public Target(int target, String targname, String aliasname, IConnection connection, String hostName) {		this.hostName = hostName;		this.target = target;		this.targname = targname;		this.aliasname = aliasname;		this.connection = connection;		if (XTStrace.bGlobalDebugEnabled)			XTStrace.debug("Create Target Id=0x" + String.format("%x", target) + " TargetName=" + targname + " aliasName=" + aliasname + " hostName=" + hostName + " Conn=" + connection);		if (this.hostName != null)			nameLookup.put(aliasname + " " + this.hostName, this);		else			nameLookup.put(aliasname, this);		printTargets ();	}	/**	 * Get target record given the target name.	 ** 	 * @param s	 *            the name of the target.	 ** @return the target record or null.	 **/	public static final Target getByName(String s) {		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Get Target By Name=" + s);//		printTargets ();		return (Target) nameLookup.get(s);	}	public static final Target getByName(String s, String hostName) {		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Get Target By Name=" + s + " hostName=" + hostName);//		printTargets ();		if (hostName != null)			return (Target) nameLookup.get(s + " " + hostName);		else			return (Target) nameLookup.get(s);	}	/**	 * Get target record given a connection.	 ** 	 * @param conn	 *            the connection.	 ** @return the target record or null.	 **/	public static final Target[] getListByConn(Object conn) {		Vector<Target> v = new Vector<Target>();		Enumeration<Target> e = nameLookup.elements();		while (e.hasMoreElements()) {			Target pt = (Target) e.nextElement();			if (pt.connection == conn)				v.addElement(pt);		}		if (v.size() > 0) {			Target[] targetArray = new Target[v.size()];			v.copyInto(targetArray);			return targetArray;		}		return new Target[0];	}	public static final Target getByConn(Object conn) {		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Get Target By Conn=" + conn);		Enumeration<Target> e = nameLookup.elements();//		printTargets ();		while (e.hasMoreElements()) {			Target pt = (Target) e.nextElement();			if (pt.connection == conn)				return (pt);		}		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Get Target By Conn=" + conn + " return null");		return null;	}	public static final void printTargets () {		Enumeration<Target> e = nameLookup.elements();		while (e.hasMoreElements()) {			Target pt = (Target) e.nextElement();		if (XTStrace.bGlobalDebugEnabled)			XTStrace.debug("List Target Id=0x" + String.format("%x", pt.target) + " TargetName=" + pt.targname + " aliasName=" + pt.aliasname + " hostName=" + pt.hostName + " Conn=" + pt.connection);		}	}	/**	 * Remove all target records with a given connection.	 ** 	 * @param conn	 *            the connection that has gone down.	 **/	public static final void remove(Object conn) {		Enumeration<Target> e = nameLookup.elements();		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Remove Conn=" + conn);//		printTargets ();		while (e.hasMoreElements()) {			Target pt = (Target) e.nextElement();			if (pt.connection == conn) {				nameLookup.remove(pt.targname);				if (XTStrace.bGlobalDebugEnabled) 					XTStrace.debug("Remove Conn=" + conn + " Success");			}		}		printTargets ();	}	/**	 * Remove all target records	 **/	public static final void removeAll() {		if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Remove all targets");		nameLookup.clear();	}		/**	 * Remove a target by name.	 * 	 * @param name Target name to remove.	 */	public static final void removeByName(String name) {				if (XTStrace.bGlobalDebugEnabled) 			XTStrace.debug("Remove target by name=" + name);		nameLookup.remove(name);		printTargets ();	}}