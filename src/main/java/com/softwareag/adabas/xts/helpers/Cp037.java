/* 
 * Copyright (c) 1998-2016 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, 
 * and/or its subsidiaries and/or its affiliates and/or their licensors. Use, reproduction, transfer, 
 * publication or disclosure is prohibited except as specifically provided for in your License Agreement 
 * with Software AG.
 */

//   Maintenance:
//   Reworked by usamih (Michael Chirila) 10/06/2022

package com.softwareag.adabas.xts.helpers;

import com.softwareag.adabas.xts.XTSversion;

public class Cp037 {
	public static final String VERSION = XTSversion.VERSION; 
	public static final String COPYRIGHT = XTSversion.COPYRIGHT;
	static final char[] null_string = { ' ' };
	static final char[] byteToString = { 0, // 0000
			1, // 0001
			2, // 0002
			3, // 0003
			156, // 0004
			9, // 0005
			134, // 0006
			127, // 0007
			151, // 0008
			141, // 0009
			142, // 000A
			11, // 000B
			12, // 000C
			13, // 000D
			14, // 000E
			15, // 000F
			16, // 0010
			17, // 0011
			18, // 0012
			19, // 0013
			157, // 0014
			133, // 0015
			8, // 0016
			135, // 0017
			24, // 0018
			25, // 0019
			146, // 001A
			143, // 001B
			28, // 001C
			29, // 001D
			30, // 001E
			31, // 001F
			128, // 0020
			129, // 0021
			130, // 0022
			131, // 0023
			132, // 0024
			10, // 0025
			23, // 0026
			27, // 0027
			136, // 0028
			137, // 0029
			138, // 002A
			139, // 002B
			140, // 002C
			5, // 002D
			6, // 002E
			7, // 002F
			144, // 0030
			145, // 0031
			22, // 0032
			147, // 0033
			148, // 0034
			149, // 0035
			150, // 0036
			4, // 0037
			152, // 0038
			153, // 0039
			154, // 003A
			155, // 003B
			20, // 003C
			21, // 003D
			158, // 003E
			26, // 003F
			32, // 0040
			160, // 0041
			226, // 0042
			228, // 0043
			224, // 0044
			225, // 0045
			227, // 0046
			229, // 0047
			231, // 0048
			241, // 0049
			162, // 004A
			46, // 004B
			60, // 004C
			40, // 004D
			43, // 004E
			124, // 004F
			38, // 0050
			233, // 0051
			234, // 0052
			235, // 0053
			232, // 0054
			237, // 0055
			238, // 0056
			239, // 0057
			236, // 0058
			223, // 0059
			33, // 005A
			36, // 005B
			42, // 005C
			41, // 005D
			59, // 005E
			172, // 005F
			45, // 0060
			47, // 0061
			194, // 0062
			196, // 0063
			192, // 0064
			193, // 0065
			195, // 0066
			197, // 0067
			199, // 0068
			209, // 0069
			166, // 006A
			44, // 006B
			37, // 006C
			95, // 006D
			62, // 006E
			63, // 006F
			248, // 0070
			201, // 0071
			202, // 0072
			203, // 0073
			200, // 0074
			205, // 0075
			206, // 0076
			207, // 0077
			204, // 0078
			96, // 0079
			58, // 007A
			35, // 007B
			64, // 007C
			39, // 007D
			61, // 007E
			34, // 007F
			216, // 0080
			97, // 0081
			98, // 0082
			99, // 0083
			100, // 0084
			101, // 0085
			102, // 0086
			103, // 0087
			104, // 0088
			105, // 0089
			171, // 008A
			187, // 008B
			240, // 008C
			253, // 008D
			254, // 008E
			177, // 008F
			176, // 0090
			106, // 0091
			107, // 0092
			108, // 0093
			109, // 0094
			110, // 0095
			111, // 0096
			112, // 0097
			113, // 0098
			114, // 0099
			170, // 009A
			186, // 009B
			230, // 009C
			184, // 009D
			198, // 009E
			164, // 009F
			181, // 00A0
			126, // 00A1
			115, // 00A2
			116, // 00A3
			117, // 00A4
			118, // 00A5
			119, // 00A6
			120, // 00A7
			121, // 00A8
			122, // 00A9
			161, // 00AA
			191, // 00AB
			208, // 00AC
			221, // 00AD
			222, // 00AE
			174, // 00AF
			94, // 00B0
			163, // 00B1
			165, // 00B2
			183, // 00B3
			169, // 00B4
			167, // 00B5
			182, // 00B6
			188, // 00B7
			189, // 00B8
			190, // 00B9
			91, // 00BA
			93, // 00BB
			175, // 00BC
			168, // 00BD
			180, // 00BE
			215, // 00BF
			123, // 00C0
			65, // 00C1
			66, // 00C2
			67, // 00C3
			68, // 00C4
			69, // 00C5
			70, // 00C6
			71, // 00C7
			72, // 00C8
			73, // 00C9
			173, // 00CA
			244, // 00CB
			246, // 00CC
			242, // 00CD
			243, // 00CE
			245, // 00CF
			125, // 00D0
			74, // 00D1
			75, // 00D2
			76, // 00D3
			77, // 00D4
			78, // 00D5
			79, // 00D6
			80, // 00D7
			81, // 00D8
			82, // 00D9
			185, // 00DA
			251, // 00DB
			252, // 00DC
			249, // 00DD
			250, // 00DE
			255, // 00DF
			92, // 00E0
			247, // 00E1
			83, // 00E2
			84, // 00E3
			85, // 00E4
			86, // 00E5
			87, // 00E6
			88, // 00E7
			89, // 00E8
			90, // 00E9
			178, // 00EA
			212, // 00EB
			214, // 00EC
			210, // 00ED
			211, // 00EE
			213, // 00EF
			48, // 00F0
			49, // 00F1
			50, // 00F2
			51, // 00F3
			52, // 00F4
			53, // 00F5
			54, // 00F6
			55, // 00F7
			56, // 00F8
			57, // 00F9
			179, // 00FA
			219, // 00FB
			220, // 00FC
			217, // 00FD
			218, // 00FE
			159 }; // 00FF

	static final byte[] string_to_byte = { 0, 
			1, // 0001
			2, // 0002
			3, // 0003
			55, // 0004
			45, // 0005
			46, // 0006
			47, // 0007
			22, // 0008
			5, // 0009
			37, // 000A
			11, // 000B
			12, // 000C
			13, // 000D
			14, // 000E
			15, // 000F
			16, // 0010
			17, // 0011
			18, // 0012
			19, // 0013
			60, // 0014
			61, // 0015
			50, // 0016
			38, // 0017
			24, // 0018
			25, // 0019
			63, // 001A
			39, // 001B
			28, // 001C
			29, // 001D
			30, // 001E
			31, // 001F
			64, // 0020
			90, // 0021
			127, // 0022
			123, // 0023
			91, // 0024
			108, // 0025
			80, // 0026
			125, // 0027
			77, // 0028
			93, // 0029
			92, // 002A
			78, // 002B
			107, // 002C
			96, // 002D
			75, // 002E
			97, // 002F
			-16, // 0030
			-15, // 0031
			-14, // 0032
			-13, // 0033
			-12, // 0034
			-11, // 0035
			-10, // 0036
			-9, // 0037
			-8, // 0038
			-7, // 0039
			122, // 003A
			94, // 003B
			76, // 003C
			126, // 003D
			110, // 003E
			111, // 003F
			124, // 0040
			-63, // 0041
			-62, // 0042
			-61, // 0043
			-60, // 0044
			-59, // 0045
			-58, // 0046
			-57, // 0047
			-56, // 0048
			-55, // 0049
			-47, // 004A
			-46, // 004B
			-45, // 004C
			-44, // 004D
			-43, // 004E
			-42, // 004F
			-41, // 0050
			-40, // 0051
			-39, // 0052
			-30, // 0053
			-29, // 0054
			-28, // 0055
			-27, // 0056
			-26, // 0057
			-25, // 0058
			-24, // 0059
			-23, // 005A
			-70, // 005B
			-32, // 005C
			-69, // 005D
			-80, // 005E
			109, // 005F
			121, // 0060
			-127, // 0061
			-126, // 0062
			-125, // 0063
			-124, // 0064
			-123, // 0065
			-122, // 0066
			-121, // 0067
			-120, // 0068
			-119, // 0069
			-111, // 006A
			-110, // 006B
			-109, // 006C
			-108, // 006D
			-107, // 006E
			-106, // 006F
			-105, // 0070
			-104, // 0071
			-103, // 0072
			-94, // 0073
			-93, // 0074
			-92, // 0075
			-91, // 0076
			-90, // 0077
			-89, // 0078
			-88, // 0079
			-87, // 007A
			-64, // 007B
			79, // 007C
			-48, // 007D
			-95, // 007E
			7, // 007F
			32, // 0080
			33, // 0081
			34, // 0082
			35, // 0083
			36, // 0084
			21, // 0085
			6, // 0086
			23, // 0087
			40, // 0088
			41, // 0089
			42, // 008A
			43, // 008B
			44, // 008C
			9, // 008D
			10, // 008E
			27, // 008F
			48, // 0090
			49, // 0091
			26, // 0092
			51, // 0093
			52, // 0094
			53, // 0095
			54, // 0096
			8, // 0097
			56, // 0098
			57, // 0099
			58, // 009A
			59, // 009B
			4, // 009C
			20, // 009D
			62, // 009E
			-1, // 009F
			65, // 00A0
			-86, // 00A1
			74, // 00A2
			-79, // 00A3
			-97, // 00A4
			-78, // 00A5
			106, // 00A6
			-75, // 00A7
			-67, // 00A8
			-76, // 00A9
			-102, // 00AA
			-118, // 00AB
			95, // 00AC
			-54, // 00AD
			-81, // 00AE
			-68, // 00AF
			-112, // 00B0
			-113, // 00B1
			-22, // 00B2
			-6, // 00B3
			-66, // 00B4
			-96, // 00B5
			-74, // 00B6
			-77, // 00B7
			-99, // 00B8
			-38, // 00B9
			-101, // 00BA
			-117, // 00BB
			-73, // 00BC
			-72, // 00BD
			-71, // 00BE
			-85, // 00BF
			100, // 00C0
			101, // 00C1
			98, // 00C2
			102, // 00C3
			99, // 00C4
			103, // 00C5
			-98, // 00C6
			104, // 00C7
			116, // 00C8
			113, // 00C9
			114, // 00CA
			115, // 00CB
			120, // 00CC
			117, // 00CD
			118, // 00CE
			119, // 00CF
			-84, // 00D0
			105, // 00D1
			-19, // 00D2
			-18, // 00D3
			-21, // 00D4
			-17, // 00D5
			-20, // 00D6
			-65, // 00D7
			-128, // 00D8
			-3, // 00D9
			-2, // 00DA
			-5, // 00DB
			-4, // 00DC
			-83, // 00DD
			-82, // 00DE
			89, // 00DF
			68, // 00E0
			69, // 00E1
			66, // 00E2
			70, // 00E3
			67, // 00E4
			71, // 00E5
			-100, // 00E6
			72, // 00E7
			84, // 00E8
			81, // 00E9
			82, // 00EA
			83, // 00EB
			88, // 00EC
			85, // 00ED
			86, // 00EE
			87, // 00EF
			-116, // 00F0
			73, // 00F1
			-51, // 00F2
			-50, // 00F3
			-53, // 00F4
			-49, // 00F5
			-52, // 00F6
			-31, // 00F7
			112, // 00F8
			-35, // 00F9
			-34, // 00FA
			-37, // 00FB
			-36, // 00FC
			-115, // 00FD
			-114, // 00FE
			-33 }; // 00FF

	public final String getString(byte[] b, int pos, int len) {
		char[] c = new char[len];
		int i = pos;
		int j = 0;
		try {
			for (;;)
				c[j++] = byteToString[b[i++] & 0xff];
		} catch (Exception e) {
		}
		return new String(c);
	}

	public final byte[] getBytes(String s) {
		char[] c = s.toCharArray();
		byte[] b = new byte[c.length];
		int i = 0;
		try {
			for (;;)
				b[i] = string_to_byte[c[i++]];
		} catch (Exception e) {
		}
		return b;
	}

	public final byte[] getBytesAndLength(String s) {
		char[] c = s.toCharArray();
		int i = c.length;
		if (i == 0) {
			i = 1;
			c = null_string;
		}
		byte[] b = new byte[i + 1];
		try {
			for (;;)
				b[i--] = string_to_byte[c[i]];
		} catch (Exception e) {
		}
		b[0] = (byte) b.length;
		return b;
	}

	public final String toString() {
		return "Cp037";
	}
}
